KeywordArguments:This way the order of the arguments does not matter.
  keyword argument  means not at the time function defination it is useful.but at the time  of function calling its useful.
  




Example: order is not a matter

def print_name(name1, name2):
  """ This function prints the name """
  print (name1 + " and " + name2 + " are sisters")

#calling the function
print_name(name2 = 'banny',name1 = 'bunny')

#o/p= bunny  banny are sisters





def print_name(name1, name2 ,name3):
  """ This function prints the name """
  print (name1 + " and " + name2 + " are sisters")
#calling the function
print_name(name2 = 'banny',name1 = 'bunny')

#o/p=Traceback (most recent call last):
  File "<string>", line 6, in <module>
TypeError: print_name() missing 1 required positional argument: 'name3'




def fun(x,y):
    c=x+y
    print("result is=:",c)
fun(x=87,y=90)
fun(y=40,x=30)

#output
result is=: 177
result is=: 70




def keywordArgs(name,age,dep=10):
    print("name:",name)
    print("age:",age)
    print("dep:",dep)
    return
keywordArgs(name='banny',age=14,dep=10)


output:
name: banny
age: 14
dep: 10


======>can we use default arguments in keywird argumens=====
yes we can allowed we can do 


def keywordArgs(name,age,dep=10):
    print("name:",name)
    print("age:",age)
    print("dep:",dep)
    return
keywordArgs(name='banny',age=14)


#output:
name: banny
age: 14
dep: 10










